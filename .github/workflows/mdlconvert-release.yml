name: Release mdlconvert

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        os:
          - name: Windows
            image: windows-latest
            rid: win-x64
            rust_target: x86_64-pc-windows-msvc
          - name: Linux
            image: ubuntu-latest
            rid: linux-x64
            rust_target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os.image }}

    name: ${{ matrix.os.name }} Executable (${{ matrix.configuration }})

    outputs:
      releaseVersion: ${{ steps.nbgv.outputs.CloudBuildNumber }}

    env:
      Solution_Name: MercuryEngine.Data.sln
      Tegra_Swizzle_Path: src/MercuryEngine.Data.TegraTextureLib
      Project_Path: tools/MercuryEngine.Data.Tools.ModelConverter/MercuryEngine.Data.Tools.ModelConverter.csproj
      Publish_Path: tools/MercuryEngine.Data.Tools.ModelConverter/bin/publish

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: dotnet/nbgv@v0.4.2
      id: nbgv
      with:
        setAllVars: true

    # Install Rust toolchain
    - name: Install Rust toolchain
      run: rustup update && rustup target add ${{ matrix.os.rust_target }}

    # Build tegra-swizzle library
    - name: Build tegra-swizzle library
      working-directory: ${{ env.Tegra_Swizzle_Path }}
      run: cargo build -r --target ${{ matrix.os.rust_target }}

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore -r ${{ matrix.os.rid }} ${{ env.Solution_Name }}

    # Execute all unit tests in the solution
    - name: Execute Core unit tests
      run: dotnet test -c ${{ matrix.configuration }} --filter "FullyQualifiedName~MercuryEngine.Data.Core.Tests"

    # Publish the binary
    - name: Publish binary
      run: dotnet publish -c ${{ matrix.configuration }} -r ${{ matrix.os.rid }} -o "${{ env.Publish_Path }}/${{ matrix.os.rid }}" -p:DebugSymbols=False ${{ env.Project_Path }}

    # ZIP artifacts for upload (Linux)
    - name: Bundle artifacts
      if: ${{ matrix.configuration == 'Release' && matrix.os.image == 'ubuntu-latest' }}
      run: zip mdlconvert_${{ matrix.os.rid }}.zip ${{ env.Publish_Path }}/${{ matrix.os.rid }}/* -jr

    # ZIP artifacts for upload (Windows)
    - name: Bundle artifacts
      if: ${{ matrix.configuration == 'Release' && matrix.os.image == 'windows-latest' }}
      run: Compress-Archive -Path ${{ env.Publish_Path }}\${{ matrix.os.rid }}\* -DestinationPath mdlconvert_${{ matrix.os.rid }}.zip

    # Upload the artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release'
      with:
        name: mdlconvert_${{ matrix.os.rid }}
        if-no-files-found: error
        path: mdlconvert_${{ matrix.os.rid }}.zip

  release:
    runs-on: "ubuntu-latest"
    name: Release
    if: ${{ github.event_name != 'pull_request' && github.event_name != 'merge_group' && startsWith(github.ref, 'refs/tags/v') }}

    permissions:
      contents: write

    needs:
      - build

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v5.0.0
        with:
          pattern: '*'
          path: publish/

      - name: Upload binaries to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: publish/mdlconvert*/**/*.zip
          draft: ${{ startsWith(github.ref, 'refs/heads/main') }}
          generateReleaseNotes: true
          name: mdlconvert ${{ needs.build.outputs.releaseVersion }}
          prerelease: true
          updateOnlyUnreleased: true
