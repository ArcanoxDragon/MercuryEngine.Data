// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace TegraSwizzle
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "mercuryenginedata_tegra_swizzle";



        /// <summary>
        ///  See [crate::surface::swizzle_surface].
        ///
        ///  # Safety
        ///  `source` and `source_len` should refer to an array with at least as many bytes as the result of [deswizzled_surface_size].
        ///  Similarly, `destination` and `destination_len` should refer to an array with at least as many bytes as as the result of [swizzled_surface_size].
        ///
        ///  All the fields of `block_dim` must be non zero.
        ///
        ///  `block_height` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "swizzle_surface", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void swizzle_surface(uint width, uint height, uint depth, byte* source, nuint source_len, byte* destination, nuint destination_len, BlockDim block_dim, uint block_height_mip0, uint bytes_per_pixel, uint mipmap_count, uint array_count);

        /// <summary>
        ///  See [crate::surface::deswizzle_surface].
        ///
        ///  # Safety
        ///  `source` and `source_len` should refer to an array with at least as many bytes as the result of [swizzled_surface_size].
        ///  Similarly, `destination` and `destination_len` should refer to an array with at least as many bytes as as the result of [deswizzled_surface_size].
        ///
        ///  All the fields of `block_dim` must be non zero.
        ///
        ///  `block_height` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "deswizzle_surface", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void deswizzle_surface(uint width, uint height, uint depth, byte* source, nuint source_len, byte* destination, nuint destination_len, BlockDim block_dim, uint block_height_mip0, uint bytes_per_pixel, uint mipmap_count, uint array_count);

        /// <summary>
        ///  See [crate::surface::swizzle_surface].
        ///
        ///  # Safety
        ///  All the fields of `block_dim` must be non zero.
        ///  `block_height_mip0` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "swizzled_surface_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint swizzled_surface_size(uint width, uint height, uint depth, BlockDim block_dim, uint block_height_mip0, uint bytes_per_pixel, uint mipmap_count, uint array_count);

        /// <summary>
        ///  See [crate::surface::swizzle_surface].
        ///
        ///  # Safety
        ///  All the fields of `block_dim` must be non zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "deswizzled_surface_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint deswizzled_surface_size(uint width, uint height, uint depth, BlockDim block_dim, uint bytes_per_pixel, uint mipmap_count, uint array_count);

        /// <summary>
        ///  See [crate::swizzle::swizzle_block_linear].
        ///
        ///  # Safety
        ///  `source` and `source_len` should refer to an array with at least as many bytes as the result of [deswizzled_mip_size].
        ///  Similarly, `destination` and `destination_len` should refer to an array with at least as many bytes as as the result of [swizzled_mip_size].
        ///
        ///  `block_height` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "swizzle_block_linear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void swizzle_block_linear(uint width, uint height, uint depth, byte* source, nuint source_len, byte* destination, nuint destination_len, uint block_height, uint bytes_per_pixel);

        /// <summary>
        ///  See [crate::swizzle::deswizzle_block_linear].
        ///
        ///  # Safety
        ///  `source` and `source_len` should refer to an array with at least as many bytes as the result of [swizzled_mip_size].
        ///  Similarly, `destination` and `destination_len` should refer to an array with at least as many bytes as as the result of [deswizzled_mip_size].
        ///
        ///  `block_height` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "deswizzle_block_linear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void deswizzle_block_linear(uint width, uint height, uint depth, byte* source, nuint source_len, byte* destination, nuint destination_len, uint block_height, uint bytes_per_pixel);

        /// <summary>
        ///  See [crate::swizzle::swizzled_mip_size].
        ///
        ///  # Safety
        ///  `block_height` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "swizzled_mip_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint swizzled_mip_size(uint width, uint height, uint depth, uint block_height, uint bytes_per_pixel);

        /// <summary>
        ///  See [crate::swizzle::deswizzled_mip_size].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "deswizzled_mip_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint deswizzled_mip_size(uint width, uint height, uint depth, uint bytes_per_pixel);

        /// <summary>
        ///  See [crate::block_height_mip0].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "block_height_mip0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint block_height_mip0(uint height);

        /// <summary>
        ///  See [crate::mip_block_height].
        ///
        ///  # Safety
        ///  `block_height_mip0` must be one of the supported values in [BlockHeight].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "mip_block_height", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint mip_block_height(uint mip_height, uint block_height_mip0);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct BlockDim
    {
        public uint width;
        public uint height;
        public uint depth;
    }



}
